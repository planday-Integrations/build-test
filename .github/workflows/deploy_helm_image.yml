name: Build and deploy BFF

on:
  workflow_call:
    inputs:     
      release_name:
        type: string
        required: true
        description: "helm release name"
      image_name:
        type: string
        required: true
        description: "image name"
      image_version:
        type: string
        required: true
        description: "image version/tag"
      helm_chart_name:
        type: string
        default: planday-integrations
        required: false
        description: helm chart to use for installation
      env_variables:
        type: string
        description: "environment variales for the format: --set=key1=value1 --set=key2=value2"
        required: false
      environment:
        description: 'Environment to deploy to'
        type: string
        required: true
    secrets:
      dns_name:
        required: true
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true 
      azure_subscription_id:
        required: true
      azure_acr_registry:
        required: true
      cluster_name:
        required: true
      cluster_resource_group:
        required: true
      env_secrets:
        required: false

jobs:
  deploy:    
    environment: ${{inputs.environment}}
    permissions:
      id-token: write # This is required for requesting the OIDC JWT      
    runs-on: 'ubuntu-latest'
    steps:      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker # defaults to "docker-containerized"      

    - name: Install azure cli
      run: |
        which az || { curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash ; }

    - name: 'Az CLI login'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.azure_client_id }}
        tenant-id: ${{ secrets.azure_tenant_id }}
        subscription-id: ${{ secrets.azure_subscription_id }}
        
    - name: Log in to Azure ACR
      run: |
        az acr login --name ${{secrets.azure_acr_registry}}
    
    - name: Login to ACR
      run: |
        az acr login --name ${{secrets.azure_acr_registry}}

    - name: Login-k8s
      uses: azure/aks-set-context@v4
      with:
        resource-group: ${{ secrets.cluster_name }}
        cluster-name: ${{ secrets.cluster_resource_group }}
        admin: 'true'

    - name: 'Deploy'
      run: |
        namespace=$(echo ${{inputs.environment}} | tr "[:upper:]" "[:lower:]")
        registry="oci://$${{secrets.azure_acr_registry}}/helm"
        dnsname=$(echo ${{secrets.dns_name}} | tr "[:upper:]" "[:lower:]")
        echo $namespace
        echo $dnsname
        echo $registry
        echo ${{inputs.env_variables}}

        { kubectl create ns $namespace && kubectl label namespace $namespace istio-injection=enabled; } || echo "namespace exists, continuing"
        
        helm upgrade \
          ${{inputs.release_name}}
          --install \
          --namespace=$namespace \
          --set network.dnsName=$dnsname \
          --set image.tag=${{inputs.image_version}} \
          --set image.repository=${{ secrets.azure_acr_registry }} \
          --set image.name=${{inputs.image_name}} \
          --create-namespace \
          $registry/${{inputs.helm_chart_name}} \
          ${{inputs.env_variables}} \
          ${{secrets.env_secrets}}
